import sys
import motion
import time
import math
import almath
from naoqi import ALProxy
from timer import timeout
from searcher import search

def detect(ip):

    try:           
        memoryProxy = ALProxy("ALMemory", ip, 9559)
        landmarkProxy = ALProxy("ALLandMarkDetection", ip, 9559)
        motionProxy = ALProxy("ALMotion", ip, 9559)
    except Exception,e:
        print "Faults in objects"
        print "ERRORS: ", e

    # Set here the size of the landmark in meters.
    landmarkTheoreticalSize = 0.020 #in meters
    # Set here the current camera ("CameraTop" or "CameraBottom").
    currentCamera = "CameraBottom"
    # Subscribe to LandmarkDetected event from ALLandMarkDetection proxy.
    landmarkProxy.subscribe("landmarkTest")

    markData = memoryProxy.getData("LandmarkDetected")
    # Wait for a mark to be detected.
    @timeout(6)
    def find_mark(markData):
        while (len(markData) == 0):
            markData = memoryProxy.getData("LandmarkDetected")
        return markData
    try:
        markData= find_mark(markData)
    except Exception, e:
        print "time out, head's gonna move"
        result=search(ip)
        if len(result)==0:
            print "timeout completely"
            sys.exit(1)
        else:
            markData=result
            print "just found it"

    
    motionProxy.setStiffnesses("Head", 1.0)
    # Retrieve landmark center position in radians.
    wzCamera = markData[1][0][0][1]
    wyCamera = markData[1][0][0][2]

    # Retrieve landmark angular size in radians.
    angularSize = markData[1][0][0][3]
    space=motion.FRAME_ROBOT

    # Compute distance to landmark.
    distanceFromCameraToLandmark = landmarkTheoreticalSize / ( 2 * math.tan( angularSize / 2))
##    print "distance to landmark: ",distanceFromCameraToLandmark
    

    # Get current camera position in NAO space.
    transform = motionProxy.getTransform(currentCamera, space, True)
    transformList = almath.vectorFloat(transform)
    robotToCamera = almath.Transform(transformList)

    # Compute the rotation to point towards the landmark.
    cameraToLandmarkRotationTransform = almath.Transform_from3DRotation(0, wyCamera, wzCamera)

    # Compute the translation to reach the landmark.
    cameraToLandmarkTranslationTransform = almath.Transform(distanceFromCameraToLandmark, 0, 0)

    # Combine all transformations to get the landmark position in NAO space.
    robotToLandmark = robotToCamera * cameraToLandmarkRotationTransform *cameraToLandmarkTranslationTransform
    print robotToLandmark
    x,y,z=robotToLandmark.r1_c4,robotToLandmark.r2_c4,robotToLandmark.r3_c4
    print "Mark position: ", x,y,z
    
    landmarkProxy.unsubscribe("landmarkTest")
    return x,y,z
##detect("me.local")
